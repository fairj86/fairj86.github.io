[
  {
    "path": "posts/2021-07-14-creating-an-api/",
    "title": "Creating an API",
    "description": "Best way to pull accurate and up-to-date data.",
    "author": [
      {
        "name": "John Fair",
        "url": {}
      }
    ],
    "date": "2021-07-14",
    "categories": [],
    "contents": "\r\nIn this post we will be looking at data from the stock market. We will be using the python package Pandas’ API, Datareader, to get stock information. Using this data, we will create multiple visuals to investigate different aspects and look at a couple of ways to analyze the risk of said stocks, based on previous performance history. In future posts we will look create ARIMA models and Long Short Term Memory (LSTM) method to predict future stock prices.\r\nApplication Programming Interface (API)- creates a pathway to recall the most up-to-date data from a specific website. When using an API with stock predictions, it updates the data to real time and gives you the current information. Most efficient API’s require user to pay for their use. I investigated an alternative option and found Pandas_Datareader. Pandas_Datareader is a sub package that allows one to create a data frame from various internet data sources, currently including: Yahoo! Finance.\r\nI’ll be answering the following questions along the way:\r\n1.) How to use Pandas_Datareader to pull stock data?\r\n2.) What was the Mean and Standard Deviation of Google stock (Alphabet.Inc)?\r\n1.) How to use Pandas_Datareader to pull stock data?\r\nWe will be using pandas_datareader to pull data from yahoo financial for this project. We will be looking at the data for the last 5 years for Apple, Amazon, Disney, Google, Home Depot, and Walmart. To pull data I used these lines of code:\r\n\r\n\r\n\r\nFor ease of labelling, we will add a company name column to this dataset for quick recall. Then as you create visual the plot will auto populate the title of the plot to correspond with the company the data is based off of. Since the company name has been defined, when you are ploting a new graph you would use the following code to auto populate the company name in its rightful place.\r\n\r\n\r\n\r\nThe “f” at the beginning of the title tells the code to find the defined component of {name} in this code.\r\n2.) What was the Mean and Standard Deviation of Google stock (Alphabet.Inc)?\r\nFor ease, this next section we will be only looking at the stock data for Google which we pulled above. Once that is done, we can create a time series to find out the rolling data for the Mean and Standard Deviation plot.\r\n\r\n\r\n\r\n\r\n\r\n\r\nThings to take note of:\r\nI am using R Studio to run Python code. In order to do so you need to install the R package Reticulate. Without this package R doesn’t know how to process Python code.\r\nWhen I started to run multiple plots, I noticed that the plots would overlap and blend. The easiest fix for this is to add plt.figure() at the beginning of each plot code and end the plot code with plt.show(). It helps define where one plot ends and the next beginnings\r\nJust to reiterate, if you haven’t installed any of the packages used the following pandas install example in the Console:\r\n$pip install pandas\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-14-creating-an-api/Capture.png",
    "last_modified": "2021-07-14T17:05:13-05:00",
    "input_file": "creating-an-api.utf8.md",
    "preview_width": 596,
    "preview_height": 169
  },
  {
    "path": "posts/2021-07-14-lstm-modeling/",
    "title": "LSTM Modeling",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "John Fair",
        "url": {}
      }
    ],
    "date": "2021-07-14",
    "categories": [],
    "contents": "\r\nLSTM Modeling\r\nLong Short-Term Memory or LSTM is special kind of RNN (Recurrent neural network), that is capable of learning long-term dependencies. RNN are link memory loops, they keep repeating over and over to give a new point. The problem with them is the more you repeat the loop the more unstable the points of data will be and create long-term dependency problems. That is where LSTM comes into play. LSTM is designed to avoid the long-term dependency problem because unlike RNN the loop or chain doesn’t have one single neural network layer (like RNNs), but four. In the illustration below we will review over why this makes such a difference.\r\n\r\n\r\n\r\n\r\n\r\n\r\nThe gates shown above learn which data in a sequence is important and decided to keep or throw away. It will pass the relevant information down the sequences to make the predictions. Therefore, condensing data and removing the outlier that would over populate and cause issues in the predictions.\r\nHow to setup LSTM?\r\n1.Import libraries\r\n2.Pull and process data\r\n3.Create LSTM Model\r\n4.Train the data\r\n5.Predictions\r\n1. Import libraries\r\n\r\n\r\n\r\n2. Pull and process data\r\n\r\n\r\n\r\nNormalize data; I set my prediction days to 60 days to understand how stock prices will look over the course of them next 2 months.\r\n2b. Prepare the data\r\n\r\n\r\n\r\n3. Build the LSTM Model\r\n\r\n\r\n\r\n4. Train the data\r\n\r\n\r\n\r\n5. Predictions\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-14-lstm-modeling/LSTM-1.png",
    "last_modified": "2021-07-14T17:21:03-05:00",
    "input_file": "lstm-modeling.utf8.md",
    "preview_width": 718,
    "preview_height": 686
  },
  {
    "path": "posts/2021-07-13-arima-modeling/",
    "title": "ARIMA Modeling",
    "description": "What is ARIMA Model?",
    "author": [
      {
        "name": "John Fair",
        "url": {}
      }
    ],
    "date": "2021-07-13",
    "categories": [],
    "contents": "\r\nARIMA Modeling\r\nWhat is ARIMA Model?\r\nARIMA stands for Autoregressive Integrated Moving Average Model. It is a model that explains a given time series based on its own past values.\r\nIt is a forecasting algorithm that predicts that future value of a stock based on past values of said stock.\r\nARIMA Parameters\r\nARIMA Models can be broken down into three order parameters: (p,d,q),\r\nAR(p) Autoregression- regression model that utilizes the relationship between a current observation and past observations. Refers to the number of lags of Y to be used as predictors.\r\nI(d) Integration- locates if a trend exists, if so than is non stationary and shows seasonality. This reduces seasonality from a time series.\r\nMA(q) Moving Average- analyzes how wrong in predicting values for past time-periods and make better estimate for the current time-period.\r\nHow do you setup an ARMIA model?\r\nImport packages: These are all the packages that I used for my whole code; some may not be used now but will be utilized is my other posts.\r\n1a. Load libraries\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nimport pandas_datareader as web\r\nfrom pandas_datareader import data as pdr\r\nimport seaborn as sns\r\nimport os\r\nimport math\r\nfrom datetime import datetime\r\nimport yfinance as yf\r\n\r\nfrom statsmodels.tsa.arima.model import ARIMA\r\nfrom pmdarima.arima import auto_arima\r\nfrom sklearn.preprocessing import MinMaxScaler\r\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\r\nfrom tensorflow.keras import Model\r\nfrom tensorflow.keras import layers\r\nfrom tensorflow.keras.layers import Dense,Dropout,LSTM\r\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\r\n\r\nplt.rcParams.update({'font.size': 10})\r\nplt.style.use(\"fivethirtyeight\")\r\nsns.set_style('whitegrid')\r\n\r\n1b. Pull Data using Pandas_Datareader\r\n\r\ncompany = 'GOOG'\r\nname = 'Alphabet.com'\r\ndata = pd.read_csv('GOOG-2.csv')\r\n\r\n2. Create and Program the ARIMA Model : I used the autoARIMA package.\r\nSplit data into train and training set\r\n\r\ndf_log = np.log(data['Close'])\r\nplt.rcParams.update({'font.size': 10})\r\ntrain_data, test_data = df_log[3:int(len(df_log)*0.9)], df_log[int(len(df_log)*0.9):]\r\n\r\nplt.figure(figsize=(8,4))\r\n\r\nplt.grid(True)\r\nplt.title(f'Closing Test and Train Data for {name}', fontsize= 14)\r\nText(0.5, 1.0, 'Closing Test and Train Data for Alphabet.com')\r\nplt.xlabel('Dates', fontsize=12)\r\nText(0.5, 0, 'Dates')\r\nplt.ylabel('Closing Prices', fontsize=12)\r\nText(0, 0.5, 'Closing Prices')\r\nplt.plot(df_log, 'green', label='Train data', linewidth=1.5)\r\n[<matplotlib.lines.Line2D object at 0x00000000657258D0>]\r\nplt.plot(test_data, 'blue', label='Test data', linewidth=1.5)\r\n[<matplotlib.lines.Line2D object at 0x0000000065740BA8>]\r\nplt.xticks(size = 10)\r\n(array([-100.,    0.,  100.,  200.,  300.,  400.,  500.,  600.]), [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])\r\nplt.yticks(size = 10)\r\n(array([6.8, 7. , 7.2, 7.4, 7.6, 7.8, 8. ]), [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])\r\nplt.legend()\r\n<matplotlib.legend.Legend object at 0x0000000066298F60>\r\nplt.tight_layout()\r\nplt.show()\r\n\r\n\r\nProgramming the ARIMA Model\r\nI am going to use the Auto_Arima for deciding the optimal order for the ARIMA model and the output gives what fitted ARIMA model as a return. After we recieve the optimal parameters, the next move is run a residual plot from the auto ARIMA. The output for this request will give Standardized residual, histogram plus estimated density, Normal Q-Q, and Correlogram visualizations.\r\n\r\nmodel_autoARIMA = auto_arima(train_data, start_p=0, start_q=0,\r\ntest='adf',       # use adftest to find optimal 'd'\r\nmax_p=3, max_q=3, # maximum p and q\r\nm=1,              # frequency of series\r\nd=None,           # let model determine 'd'\r\nseasonal=False,   # No Seasonality\r\nstart_P=0, \r\nD=0, \r\ntrace=True,\r\nerror_action='ignore',  \r\nsuppress_warnings=True, \r\nstepwise=True,)\r\nPerforming stepwise search to minimize aic\r\n ARIMA(0,1,0)(0,0,0)[0] intercept   : AIC=-2182.532, Time=0.06 sec\r\n ARIMA(1,1,0)(0,0,0)[0] intercept   : AIC=-2209.062, Time=0.10 sec\r\n ARIMA(0,1,1)(0,0,0)[0] intercept   : AIC=-2205.521, Time=0.16 sec\r\n ARIMA(0,1,0)(0,0,0)[0]             : AIC=-2182.083, Time=0.03 sec\r\n ARIMA(2,1,0)(0,0,0)[0] intercept   : AIC=-2207.656, Time=0.14 sec\r\n ARIMA(1,1,1)(0,0,0)[0] intercept   : AIC=-2207.515, Time=0.09 sec\r\n ARIMA(2,1,1)(0,0,0)[0] intercept   : AIC=-2206.218, Time=0.22 sec\r\n ARIMA(1,1,0)(0,0,0)[0]             : AIC=-2207.001, Time=0.03 sec\r\n\r\nBest model:  ARIMA(1,1,0)(0,0,0)[0] intercept\r\nTotal fit time: 0.843 seconds\r\nprint(model_autoARIMA.summary())\r\n                               SARIMAX Results                                \r\n==============================================================================\r\nDep. Variable:                      y   No. Observations:                  449\r\nModel:               SARIMAX(1, 1, 0)   Log Likelihood                1107.531\r\nDate:                Wed, 14 Jul 2021   AIC                          -2209.062\r\nTime:                        16:52:17   BIC                          -2196.747\r\nSample:                             0   HQIC                         -2204.207\r\n                                - 449                                         \r\nCovariance Type:                  opg                                         \r\n==============================================================================\r\n                 coef    std err          z      P>|z|      [0.025      0.975]\r\n------------------------------------------------------------------------------\r\nintercept      0.0020      0.001      2.022      0.043    5.99e-05       0.004\r\nar.L1         -0.2487      0.028     -8.770      0.000      -0.304      -0.193\r\nsigma2         0.0004   1.56e-05     26.784      0.000       0.000       0.000\r\n===================================================================================\r\nLjung-Box (L1) (Q):                   0.04   Jarque-Bera (JB):               403.44\r\nProb(Q):                              0.85   Prob(JB):                         0.00\r\nHeteroskedasticity (H):               1.65   Skew:                            -0.17\r\nProb(H) (two-sided):                  0.00   Kurtosis:                         7.64\r\n===================================================================================\r\n\r\nWarnings:\r\n[1] Covariance matrix calculated using the outer product of gradients (complex-step).\r\n\r\n\r\nmodel = ARIMA(train_data, order=(1, 1, 0))\r\nfitted = model.fit()\r\nprint(fitted.summary())\r\n                               SARIMAX Results                                \r\n==============================================================================\r\nDep. Variable:                  Close   No. Observations:                  449\r\nModel:                 ARIMA(1, 1, 0)   Log Likelihood                1105.500\r\nDate:                Wed, 14 Jul 2021   AIC                          -2207.001\r\nTime:                        16:52:19   BIC                          -2198.791\r\nSample:                             0   HQIC                         -2203.764\r\n                                - 449                                         \r\nCovariance Type:                  opg                                         \r\n==============================================================================\r\n                 coef    std err          z      P>|z|      [0.025      0.975]\r\n------------------------------------------------------------------------------\r\nar.L1         -0.2418      0.029     -8.455      0.000      -0.298      -0.186\r\nsigma2         0.0004   1.59e-05     26.527      0.000       0.000       0.000\r\n===================================================================================\r\nLjung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):               407.01\r\nProb(Q):                              0.97   Prob(JB):                         0.00\r\nHeteroskedasticity (H):               1.66   Skew:                            -0.17\r\nProb(H) (two-sided):                  0.00   Kurtosis:                         7.66\r\n===================================================================================\r\n\r\nWarnings:\r\n[1] Covariance matrix calculated using the outer product of gradients (complex-step).\r\n\r\n\r\nplt.figure()\r\n\r\nmodel_autoARIMA.plot_diagnostics()\r\n\r\nplt.subplots_adjust(top=1.4,bottom=1.25)\r\nplt.tight_layout()\r\nplt.show()\r\n\r\n\r\n3. Use the ARIMA model to forecast the stock\r\nForecast\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-07-13-arima-modeling/arima-modeling_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2021-07-14T16:52:25-05:00",
    "input_file": "arima-modeling.utf8.md",
    "preview_width": 1536,
    "preview_height": 768
  },
  {
    "path": "posts/2021-04-29-yes-i-have-a-blog/",
    "title": "Intro to Senior Project",
    "description": "Why Python and Stock Predictions?",
    "author": [
      {
        "name": "John Fair",
        "url": {}
      }
    ],
    "date": "2021-04-29",
    "categories": [],
    "contents": "\r\nWhy?\r\nMy senior project is a twofold assignment for me. I am a transfer student to BYU—Idaho and so I have taken a patchwork of courses and at my old school they did not put an emphasis on learning the Python language. During my internship, I found out that this fact would put me a disadvantage from other new graduates, so I decided to utilize and bulk up my understanding of the language during my project.\r\nI have recently been interested in learning more about stock and investments. I was taught the concept of Time Series and find that this could be a great topic with real life applications in my future. I am going to use stock datasets for 6-7 of the most well-known companies: Apple, Amazon, Disney, Google, Microsoft, Nike, and Walmart. My main question is figuring out which of these companies would the best choice to invest in and use time series methodology to see where these stocks could go in the future.\r\nWhile researching time series or forecasting for stock predictions the one coding tool that was a fundamental beginning point is Application Programming Interface (API). To simplify what API’s do is that they create a pathway to recall the most up-to-date data from a specific website. When using an API with stock predictions, it updates the data to real time and gives you the current information. This kind of tool will be beneficial when trying to find out which stock is the best to invest in.\r\nI have found so far that python is a little bit more user friendly and inclusive with package options to help assist different projects. When researching API’s, python has a package called “YFinance.” It is an open-source library to allows you to access financial data available on Yahoo Finance. The package is very streamlined. All you need to do is create a ticker object for a particular stock or list of stock tickers and call all the methods on this object. As seen below:\r\nOne crowning feature of yfinance is that you can get highly concentrated data, all the way down to 5 minutes, 3 minutes and even 1 minute data! The full range of intervals available are:\r\n1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo\r\nOne thing to note is that the 1m data is only retrievable for the latest 7 days.On the flip side if you decide to pull at 1 day interval, your dataset could extend to 60 days. I’m still weighing out options and see what’s the best course of action.\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-07-13T18:01:32-05:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to John Fair's Senior Project",
    "description": "Stock prediction project using python language.",
    "author": [
      {
        "name": "John Fair",
        "url": {}
      }
    ],
    "date": "2021-04-29",
    "categories": [],
    "contents": "\r\nShort Description\r\nThis project is going to span from learning the depths of python language and applying stock prediction in a time series.\r\nLearn more about creating blogs with Distill at:\r\nhttps://rstudio.github.io/distill/blog.html\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-07-13T18:21:54-05:00",
    "input_file": {}
  }
]
